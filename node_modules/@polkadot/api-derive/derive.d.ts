import type { AnyFunction } from '@polkadot/types/types/index.js';
import * as accounts from '@polkadot/api-derive/accounts/index.js';
import * as alliance from '@polkadot/api-derive/alliance/index.js';
import * as bagsList from '@polkadot/api-derive/bagsList/index.js';
import * as balances from '@polkadot/api-derive/balances/index.js';
import * as bounties from '@polkadot/api-derive/bounties/index.js';
import * as chain from '@polkadot/api-derive/chain/index.js';
import * as contracts from '@polkadot/api-derive/contracts/index.js';
import * as council from '@polkadot/api-derive/council/index.js';
import * as crowdloan from '@polkadot/api-derive/crowdloan/index.js';
import * as democracy from '@polkadot/api-derive/democracy/index.js';
import * as elections from '@polkadot/api-derive/elections/index.js';
import * as imOnline from '@polkadot/api-derive/imOnline/index.js';
import * as membership from '@polkadot/api-derive/membership/index.js';
import * as parachains from '@polkadot/api-derive/parachains/index.js';
import * as session from '@polkadot/api-derive/session/index.js';
import * as society from '@polkadot/api-derive/society/index.js';
import * as staking from '@polkadot/api-derive/staking/index.js';
import * as technicalCommittee from '@polkadot/api-derive/technicalCommittee/index.js';
import * as treasury from '@polkadot/api-derive/treasury/index.js';
import * as tx from '@polkadot/api-derive/tx/index.js';
export declare const derive: {
    accounts: typeof accounts;
    alliance: typeof alliance;
    bagsList: typeof bagsList;
    balances: typeof balances;
    bounties: typeof bounties;
    chain: typeof chain;
    contracts: typeof contracts;
    council: typeof council;
    crowdloan: typeof crowdloan;
    democracy: typeof democracy;
    elections: typeof elections;
    imOnline: typeof imOnline;
    membership: typeof membership;
    parachains: typeof parachains;
    session: typeof session;
    society: typeof society;
    staking: typeof staking;
    technicalCommittee: typeof technicalCommittee;
    treasury: typeof treasury;
    tx: typeof tx;
};
type DeriveSection<Section> = {
    [M in keyof Section]: Section[M] extends AnyFunction ? ReturnType<Section[M]> : never;
};
type DeriveAllSections<AllSections> = {
    [S in keyof AllSections]: DeriveSection<AllSections[S]>;
};
export interface ExactDerive extends DeriveAllSections<typeof derive> {
}
export {};
